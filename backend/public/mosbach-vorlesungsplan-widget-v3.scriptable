{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "cyan",
    "glyph" : "user-graduate"
  },
  "name" : "Mosbach Vorlesungsplan v3",
  "script" : "\/\/ Made by Felix K. INF19A and Lars Rickert INF19B :)\n\nconst course = args.widgetParameter || \"inf19a\";\nlet lectures = [];\nlet hasLoadingError = false;\n\ntry {\n  lectures = await fetchNextLectures(2);\n} catch (e) {\n  hasLoadingError = true;\n}\n\nconst widget = new ListWidget();\nawait createWidget();\n\n\/\/ If you run it in the app\nif (!config.runsInWidget) await widget.presentSmall();\nScript.setWidget(widget);\nScript.complete();\n\n\/\/ Create Widget\nasync function createWidget() {\n  \/\/ Background Gradient\n  const gradient = new LinearGradient();\n  gradient.locations = [0, 0.5, 1];\n  gradient.colors = [new Color(\"0F2027\"), new Color(\"203A43\"), new Color(\"2C5364\")];\n  widget.backgroundGradient = gradient;\n\n  const layout = widget.addStack();\n  layout.layoutVertically();\n\n  const logoStack = layout.addStack();\n  logoStack.layoutHorizontally();\n  logoStack.setPadding(6, 0, 0, 0);\n  logoStack.addSpacer(90);\n\n  const vStack = layout.addStack();\n  vStack.layoutVertically();\n\n  \/\/ DHBW Logo\n  const logoReq = new Request(\"https:\/\/i.ibb.co\/XkRGw53\/logo.png\");\n  const logoImg = await logoReq.loadImage();\n  const wimg = logoStack.addImage(logoImg);\n  wimg.imageSize = new Size(40, 40);\n  wimg.rightAlignImage();\n  vStack.addSpacer(8);\n\n  let text;\n\n  if (hasLoadingError) text = \"Vorlesungen konnten nicht geladen werden.\";\n  else if (lectures.length === 0) text = \"Viel SpaÃŸ in der Praxisphase ðŸ˜Ž\";\n  if (text) return addText(vStack, text, 15, true);\n\n  let titleText;\n\n  if (isToday(lectures[0].start)) titleText = \"Heute\";\n  else if (isToday(lectures[0].start, 1)) titleText = \"Morgen\";\n  else {\n    titleText = `${getWeekday(lectures[0].start)} (${lectures[0].start.getDate().toString().padStart(2, \"0\")}.${\n      lectures[0].start.getMonth() + 1\n    })`;\n  }\n\n  addText(vStack, titleText, 16, true);\n  vStack.addSpacer(8);\n\n  const onSameDay = lectures.length >= 2 ? datesOnSameDay(lectures[0].start, lectures[1].start) : false;\n  const max = onSameDay ? 2 : 1;\n\n  for (let i = 0; i < max; i++) {\n    addText(vStack, lectures[i].name, 10);\n\n    const schedule = vStack.addText(`${timeToString(lectures[i].start)} - ${timeToString(lectures[i].end)}`);\n    schedule.textColor = Color.white();\n    vStack.addSpacer(6);\n  }\n}\n\n\/\/ Getting count next LecturingDataFromAPI\nasync function fetchNextLectures(count) {\n  const req = new Request(`https:\/\/api.rickstack.de\/lectures\/${course}?excludePast=true`);\n\n  try {\n    const lectures = (await req.loadJSON()).slice(0, count);\n\n    lectures.forEach((l) => {\n      l.start = new Date(l.start);\n      l.end = new Date(l.end);\n      l.lastModified = new Date(l.lastModified);\n    });\n\n    return lectures;\n  } catch (e) {\n    console.error(e);\n    throw new Error();\n  }\n}\n\nfunction addText(stack, text, size, bold = false) {\n  const txt = stack.addText(text);\n  txt.font = bold ? Font.boldRoundedSystemFont(size) : Font.mediumRoundedSystemFont(size);\n  txt.textColor = Color.white();\n}\n\n\/\/ check if date is today\nfunction isToday(date, offset = 0) {\n  const todayStart = new Date();\n  todayStart.setHours(0, 0, 0, 0);\n  todayStart.setDate(todayStart.getDate() + offset);\n\n  const todayEnd = new Date();\n  todayEnd.setHours(23, 59, 59, 59);\n  todayEnd.setDate(todayEnd.getDate() + offset);\n\n  return date.getTime() >= todayStart.getTime() && date.getTime() <= todayEnd.getTime();\n}\n\nfunction datesOnSameDay(a, b) {\n  return a.getDate() === b.getDate() && a.getMonth() === b.getMonth() && a.getFullYear() === b.getFullYear();\n}\n\n\/\/ Getting Weekday as String\nfunction getWeekday(date) {\n  const weekdays = [\"Sonntag\", \"Montag\", \"Dienstag\", \"Mittwoch\", \"Donnerstag\", \"Freitag\", \"Samstag\"];\n  return weekdays[date.getDay()];\n}\n\n\/\/ Create 24H Timestring e.g.: 12:23\nfunction timeToString(date) {\n  const hours = date.getHours().toString().padStart(2, \"0\");\n  const minutes = date.getMinutes().toString().padStart(2, \"0\");\n  return `${hours}:${minutes}`;\n}",
  "share_sheet_inputs" : [

  ]
}